type Project @entity {
  id: ID!
  projectId: Int!
  cv: Int! # contracts version

  # Conditional on if using v1.x or v2 contracts
  handle: String
  metadataUri: String
  metadataDomain: BigInt
  terminal: Bytes

  creator: Bytes!
  createdAt: BigInt!
  totalPaid: BigInt!
  totalRedeemed: BigInt!
  currentBalance: BigInt!
  participants: [Participant!]! @derivedFrom(field: "project")
  payEvents: [PayEvent!]! @derivedFrom(field: "project")
  printPremineEvents: [PrintPremineEvent!]! @derivedFrom(field: "project")
  tapEvents: [TapEvent!]! @derivedFrom(field: "project")
  redeemEvents: [RedeemEvent!]! @derivedFrom(field: "project")
  printReservesEvents: [PrintReservesEvent!]! @derivedFrom(field: "project")
  distributeToPayoutModEvents: [DistributeToPayoutModEvent!]!
    @derivedFrom(field: "project")
  distributeToTicketModEvents: [DistributeToTicketModEvent!]!
    @derivedFrom(field: "project")
  deployedERC20s: [DeployedERC20Event!]! @derivedFrom(field: "project")
}

type _Schema_
  @fulltext(
    name: "projectSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Project", fields: [{ name: "handle" }] }]
  )

type Participant @entity {
  id: ID!
  project: Project!
  wallet: Bytes!
  totalPaid: BigInt!
  lastPaidTimestamp: BigInt!
  balance: BigInt!
  stakedBalance: BigInt!
  unstakedBalance: BigInt!
}

type ProjectEvent @entity {
  id: ID!
  project: Project!
  timestamp: BigInt!
  payEvent: PayEvent 
  printPremineEvent: PrintPremineEvent 
  tapEvent: TapEvent 
  redeemEvent: RedeemEvent 
  printReservesEvent: PrintReservesEvent 
  distributeToPayoutModEvent: DistributeToPayoutModEvent 
  distributeToTicketModEvent: DistributeToTicketModEvent 
  deployedERC20Event: DeployedERC20Event
}

type PayEvent @entity {
  id: ID!
  project: Project!
  caller: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  note: String
  timestamp: BigInt!
  txHash: Bytes!
}

type PrintPremineEvent @entity {
  id: ID!
  project: Project!
  beneficiary: Bytes!
  amount: BigInt!
  memo: String
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

type TapEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  beneficiary: Bytes!
  amount: BigInt!
  currency: BigInt!
  netTransferAmount: BigInt!
  beneficiaryTransferAmount: BigInt!
  govFeeAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
  distributions: [DistributeToPayoutModEvent!]! @derivedFrom(field: "tapEvent")
}

type RedeemEvent @entity {
  id: ID!
  project: Project!
  holder: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  returnAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

type PrintReservesEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  beneficiary: Bytes!
  count: BigInt!
  beneficiaryTicketAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
  distributions: [DistributeToTicketModEvent!]!
    @derivedFrom(field: "printReservesEvent")
}

type DistributeToPayoutModEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  projectId: BigInt!
  modProjectId: BigInt!
  modAllocator: Bytes!
  modBeneficiary: Bytes!
  modPreferUnstaked: Boolean!
  modCut: BigInt!
  caller: Bytes!
  tapEvent: TapEvent!
  timestamp: BigInt!
  txHash: Bytes!
}

type DistributeToTicketModEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  projectId: BigInt!
  modBeneficiary: Bytes!
  modPreferUnstaked: Boolean!
  modCut: BigInt!
  caller: Bytes!
  printReservesEvent: PrintReservesEvent!
  timestamp: BigInt!
  txHash: Bytes!
}

type DeployedERC20Event @entity {
  id: ID!
  project: Project!
  symbol: String!
  deployedAtBlockNum: BigInt!
  address: Bytes
}