# Any event used for both v1 and v2 contracts includes a `cv` property, which allows for querying events for a specific contracts version.

# v1.0, v1.1, v2
type ProtocolLog @entity {
  id: ID!
  v1: ProtocolV1Log @derivedFrom(field: "log")
  v2: ProtocolV2Log @derivedFrom(field: "log")

  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

# v2
type ProtocolV2Log @entity {
  id: ID!
  log: ProtocolLog!
  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

# v1.0, v1.1, v2
type ProjectCreateEvent @entity {
  id: ID!
  cv: Int!
  projectId: Int!
  project: Project!
  timestamp: BigInt!
  txHash: Bytes!
  caller: Bytes!
}

# v1.0, v1.1, v2
type Project @entity {
  id: ID!
  projectId: Int!
  cv: Int!

  # Conditional on if using v1.x or v2 contracts
  handle: String
  metadataUri: String
  metadataDomain: BigInt
  terminal: Bytes

  creator: Bytes!
  createdAt: BigInt!
  totalPaid: BigInt!
  totalRedeemed: BigInt!
  currentBalance: BigInt!

  # Derived fields
  participants: [Participant!]! @derivedFrom(field: "project")
  payEvents: [PayEvent!]! @derivedFrom(field: "project")
  mintTokensEvents: [MintTokensEvent!]! @derivedFrom(field: "project")
  tapEvents: [TapEvent!]! @derivedFrom(field: "project")
  redeemEvents: [RedeemEvent!]! @derivedFrom(field: "project")
  printReservesEvents: [PrintReservesEvent!]! @derivedFrom(field: "project")
  distributeToPayoutModEvents: [DistributeToPayoutModEvent!]!
    @derivedFrom(field: "project")
  distributeToTicketModEvents: [DistributeToTicketModEvent!]!
    @derivedFrom(field: "project")
  deployedERC20s: [DeployedERC20Event!]! @derivedFrom(field: "project")
  distributePayoutsEvents: [DistributePayoutsEvent!]! @derivedFrom(field: "project")
  distributeToPayoutSplitEvents: [DistributeToPayoutSplitEvent!]! @derivedFrom(field: "project")
  distributeReservedTokensEvents: [DistributeReservedTokensEvent!]! @derivedFrom(field: "project")
  distributeToReservedTokenSplitEvents: [DistributeToReservedTokenSplitEvent!]! @derivedFrom(field: "project")
  deployedERC20Events: [DeployedERC20Event!]! @derivedFrom(field: "project")
  useAllowanceEvents: [UseAllowanceEvent!]! @derivedFrom(field: "project")
  projectEvents: [ProjectEvent!]! @derivedFrom(field: "project")
}

# v1.0, v1.1, v2
type _Schema_
  @fulltext(
    name: "projectSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Project", fields: [{ name: "handle" }] }]
  )

# v1.0, v1.1, v2
type Participant @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  wallet: Bytes!
  totalPaid: BigInt!
  lastPaidTimestamp: BigInt!
  balance: BigInt!
  stakedBalance: BigInt!
  unstakedBalance: BigInt!
}

# v1.0, v1.1, v2
type ProjectEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  timestamp: BigInt!
  payEvent: PayEvent
  mintTokensEvent: MintTokensEvent 
  tapEvent: TapEvent 
  redeemEvent: RedeemEvent 
  printReservesEvent: PrintReservesEvent 
  distributeToPayoutModEvent: DistributeToPayoutModEvent 
  distributeToTicketModEvent: DistributeToTicketModEvent 
  deployedERC20Event: DeployedERC20Event
  projectCreateEvent: ProjectCreateEvent
  distributePayoutsEvent: DistributePayoutsEvent
  distributeReservedTokensEvent: DistributeReservedTokensEvent
  distributeToReservedTokenSplitEvent: DistributeToReservedTokenSplitEvent
  useAllowanceEvent: UseAllowanceEvent
}

# v1.0, v1.1, v2
type PayEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  caller: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  note: String
  timestamp: BigInt!
  txHash: Bytes!
}

# v1.0, v1.1, v2
type MintTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  beneficiary: Bytes!
  amount: BigInt!
  memo: String
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

# v1.0, v1.1
type TapEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  beneficiary: Bytes!
  amount: BigInt!
  currency: BigInt!
  netTransferAmount: BigInt!
  beneficiaryTransferAmount: BigInt!
  govFeeAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
  distributions: [DistributeToPayoutModEvent!]! @derivedFrom(field: "tapEvent")
}

# v2
type DistributePayoutsEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  fundingCycleConfiguration: BigInt!
  fundingCycleNumber: Int!
  beneficiary: Bytes!
  amount: BigInt!
  distributedAmount: BigInt!
  fee: BigInt!
  beneficiaryDistributionAmount: BigInt!
  memo: String!
  caller: Bytes!
}

# v2
type DistributeToPayoutSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  domain: BigInt!
  group: BigInt!
  amount: BigInt!
  caller: Bytes!
  # Split struct properties below
  preferClaimed: Boolean!
  preferAddToBalance: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
  allocator: Bytes!
}

# v1.0, v1.1, v2
type RedeemEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  holder: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  returnAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

# v1.0, v1.1
type PrintReservesEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  fundingCycleId: BigInt!
  beneficiary: Bytes!
  count: BigInt!
  beneficiaryTicketAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
  distributions: [DistributeToTicketModEvent!]!
    @derivedFrom(field: "printReservesEvent")
}

# v1.0, v1.1
type DistributeToPayoutModEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  fundingCycleId: BigInt!
  modProjectId: Int!
  modAllocator: Bytes!
  modBeneficiary: Bytes!
  modPreferUnstaked: Boolean!
  modCut: BigInt!
  caller: Bytes!
  tapEvent: TapEvent!
  timestamp: BigInt!
  txHash: Bytes!
}

# v2
type DistributeReservedTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  fundingCycleNumber: Int!
  beneficiary: Bytes!
  tokenCount: BigInt!
  beneficiaryTokenCount: BigInt!
  memo: String!
  caller: Bytes!
}

# v2
type DistributeToReservedTokenSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  tokenCount: BigInt!
  caller: Bytes!
  # Split struct properties below
  preferClaimed: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
  allocator: Bytes!
}

# v1.0, v1.1
type DistributeToTicketModEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  projectId: Int!
  modBeneficiary: Bytes!
  modPreferUnstaked: Boolean!
  modCut: BigInt!
  caller: Bytes!
  printReservesEvent: PrintReservesEvent!
  timestamp: BigInt!
  txHash: Bytes!
}

# v1.1, v2
type DeployedERC20Event @entity {
  id: ID!
  project: Project!
  projectId: Int!
  cv: Int!
  symbol: String!
  address: Bytes
  timestamp: BigInt!
  txHash: Bytes!
}

# v2
type UseAllowanceEvent @entity{
  id: ID!
  project: Project!
  fundingCycleConfiguration: BigInt!
  fundingCycleNumber: Int!
  projectId: Int!
  beneficiary: Bytes!
  amount: BigInt!
  distributedAmount: BigInt!
  netDistributedamount: BigInt!
  memo: String!
  caller: Bytes!
}